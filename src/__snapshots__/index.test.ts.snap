// Vitest Snapshot v1

exports[`generate should match snapshot 1`] = `
"/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  \\"/users\\": {
    /** List all users */
    get: operations[\\"listUsers\\"];
    /** Create an user */
    post: operations[\\"createUser\\"];
  };
  \\"/users/{id}\\": {
    /** Get an user */
    get: operations[\\"getUser\\"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    User: {
      /**
       * Format: int64 
       * @example 1
       */
      id?: number;
      /** @example john */
      username?: string;
      firstName?: string;
      lastName?: string;
      email?: string;
      password?: string;
      phone?: string;
      /**
       * Format: int32 
       * @description User Status
       */
      userStatus?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  listUsers: {
    /** List all users */
    parameters: {
      query: {
        per: number;
        page: number;
      };
    };
    responses: {
      /** @description A paged array of users */
      200: {
        content: {
          \\"application/json\\": (components[\\"schemas\\"][\\"User\\"])[];
        };
      };
    };
  };
  createUser: {
    /** Create an user */
    requestBody?: {
      content: {
        \\"application/json\\": components[\\"schemas\\"][\\"User\\"];
      };
    };
    responses: {
      /** @description A paged array of users */
      200: {
        content: {
          \\"application/json\\": components[\\"schemas\\"][\\"User\\"];
        };
      };
    };
  };
  getUser: {
    /** Get an user */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description A paged array of users */
      200: {
        content: {
          \\"application/json\\": components[\\"schemas\\"][\\"User\\"];
        };
      };
    };
  };
}

  
export const operationIdToPath = {
  listUsers: \\"/users\\",
createUser: \\"/users\\",
getUser: \\"/users/{id}\\"
} as const

export const operationIdToMethod = {
  listUsers: \\"get\\",
createUser: \\"post\\",
getUser: \\"get\\"
} as const

export const createFetcher = (
  ownFetcher: (
    path: string,
    param: {
      method: \\"get\\" | \\"post\\" | \\"put\\" | \\"patch\\" | \\"delete\\" | \\"option\\" | \\"head\\"
      query?: Record<string, unknown>
      body?: Record<string, unknown>
    }
  ) => Promise<any>
) =>
  new Proxy(
    {},
    {
      get: (_, operationId: keyof operations) => {
        return (params: {
          path?: Record<string, unknown>
          query?: Record<string, unknown>
          body?: Record<string, unknown>
        }) => {
          return ownFetcher(
            operationIdToPath[operationId].replace(
              /{w+}/g,
              (_, key) => params.path?.[key]
            ),
            {
              method: operationIdToMethod[operationId],
              query: params.query,
              body: params.body,
            }
          )
        }
      },
    }
  ) as {
    [OpId in keyof operations]: (
      params: Get<operations[OpId], \\"parameters\\"> &
        (Get<
          operations[OpId],
          \\"requestBody.content.application/json\\"
        > extends unknown
          ? {}
          : {
              body: Get<
                operations[OpId],
                \\"requestBody.content.application/json\\"
              >
            })
    ) => Promise<
      Get<operations[OpId], \\"responses.200.content.application/json\\">
    >
  }
"
`;
